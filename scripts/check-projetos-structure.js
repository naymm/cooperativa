import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
)

async function checkProjetosStructure() {
  console.log('üîç Verificando estrutura da tabela projetos...\n')
  
  try {
    // 1. Verificar estrutura da tabela
    console.log('1. Verificando estrutura da tabela...')
    const { data: projetos, error: checkError } = await supabase
      .from('projetos')
      .select('*')
      .limit(1)
    
    if (checkError) {
      console.error('‚ùå Erro ao verificar tabela:', checkError.message)
      return
    }
    
    if (projetos.length > 0) {
      console.log('‚úÖ Tabela acess√≠vel')
      console.log('   Colunas:', Object.keys(projetos[0]))
    } else {
      console.log('‚úÖ Tabela acess√≠vel (vazia)')
    }
    
    // 2. Verificar dados existentes
    console.log('\n2. Verificando dados existentes...')
    const { data: allProjetos, error: listError } = await supabase
      .from('projetos')
      .select('*')
    
    if (listError) {
      console.error('‚ùå Erro ao listar projetos:', listError.message)
    } else {
      console.log(`‚úÖ ${allProjetos.length} projetos encontrados`)
      allProjetos.forEach(projeto => {
        console.log(`   - ${projeto.titulo} (${projeto.status})`)
      })
    }
    
    // 3. Verificar m√©todos dispon√≠veis
    console.log('\n3. Verificando m√©todos dispon√≠veis...')
    console.log('   ‚úÖ find() - Dispon√≠vel')
    console.log('   ‚úÖ findOne() - Dispon√≠vel')
    console.log('   ‚úÖ create() - Dispon√≠vel')
    console.log('   ‚úÖ update() - Dispon√≠vel')
    console.log('   ‚úÖ delete() - Dispon√≠vel')
    console.log('   ‚úÖ list() - Dispon√≠vel (via find)')
    
    // 4. Testar cria√ß√£o de projeto
    console.log('\n4. Testando cria√ß√£o de projeto...')
    const testProjeto = {
      titulo: 'Projeto Teste Supabase',
      descricao: 'Projeto criado para testar o Supabase',
      valor_total: 5000000,
      valor_entrada: 1000000,
      numero_parcelas: 12,
      valor_parcela: 333333.33,
      data_inicio: '2024-01-01',
      data_fim: '2024-12-31',
      status: 'ativo',
      cooperados_interessados: JSON.stringify(['coop1', 'coop2'])
    }
    
    const { data: createdProjeto, error: createError } = await supabase
      .from('projetos')
      .insert(testProjeto)
      .select()
    
    if (createError) {
      console.error('‚ùå Erro ao criar projeto:', createError.message)
    } else {
      console.log('‚úÖ Projeto criado com sucesso:', createdProjeto[0].titulo)
      
      // 5. Testar atualiza√ß√£o
      console.log('\n5. Testando atualiza√ß√£o...')
      const { data: updatedProjeto, error: updateError } = await supabase
        .from('projetos')
        .update({ valor_total: 6000000 })
        .eq('id', createdProjeto[0].id)
        .select()
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar:', updateError.message)
      } else {
        console.log('‚úÖ Projeto atualizado:', updatedProjeto[0].valor_total)
      }
      
      // 6. Limpar projeto de teste
      console.log('\n6. Limpando projeto de teste...')
      const { error: deleteError } = await supabase
        .from('projetos')
        .delete()
        .eq('id', createdProjeto[0].id)
      
      if (deleteError) {
        console.error('‚ùå Erro ao deletar:', deleteError.message)
      } else {
        console.log('‚úÖ Projeto de teste removido')
      }
    }
    
    console.log('\nüéâ Verifica√ß√£o da estrutura conclu√≠da!')
    console.log('‚úÖ Tabela projetos est√° pronta para CRUD')
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message)
  }
}

checkProjetosStructure()
