import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
)

async function checkInscricoesStructure() {
  console.log('üîç Verificando estrutura da tabela inscricoes_publicas...\n')
  
  try {
    // 1. Verificar estrutura da tabela
    console.log('1. Verificando estrutura da tabela...')
    const { data: inscricoes, error: checkError } = await supabase
      .from('inscricoes_publicas')
      .select('*')
      .limit(1)
    
    if (checkError) {
      console.error('‚ùå Erro ao verificar tabela:', checkError.message)
      return
    }
    
    if (inscricoes.length > 0) {
      console.log('‚úÖ Tabela acess√≠vel')
      console.log('   Colunas:', Object.keys(inscricoes[0]))
    } else {
      console.log('‚úÖ Tabela acess√≠vel (vazia)')
    }
    
    // 2. Verificar dados existentes
    console.log('\n2. Verificando dados existentes...')
    const { data: allInscricoes, error: listError } = await supabase
      .from('inscricoes_publicas')
      .select('*')
    
    if (listError) {
      console.error('‚ùå Erro ao listar inscri√ß√µes:', listError.message)
    } else {
      console.log(`‚úÖ ${allInscricoes.length} inscri√ß√µes encontradas`)
      allInscricoes.forEach(inscricao => {
        console.log(`   - ${inscricao.nome_completo} (${inscricao.status})`)
      })
    }
    
    // 3. Testar cria√ß√£o de inscri√ß√£o
    console.log('\n3. Testando cria√ß√£o de inscri√ß√£o...')
    const novaInscricao = {
      nome_completo: 'Jo√£o Silva Teste',
      email: 'joao.teste@email.com',
      telefone: '+244 123 456 789',
      bi: '123456789LA123',
      data_nascimento: '1990-01-01',
      profissao: 'Engenheiro',
      renda_mensal: 500000,
      provincia: 'Luanda',
      municipio: 'Luanda',
      endereco_completo: 'Rua Teste, n¬∫ 123',
      assinatura_plano_id: 'teste-plano-id',
      status: 'pendente'
    }
    
    const { data: createdInscricao, error: createError } = await supabase
      .from('inscricoes_publicas')
      .insert(novaInscricao)
      .select()
    
    if (createError) {
      console.error('‚ùå Erro ao criar inscri√ß√£o:', createError.message)
    } else {
      console.log('‚úÖ Inscri√ß√£o criada com sucesso:', createdInscricao[0].nome_completo)
      
      // 4. Testar atualiza√ß√£o
      console.log('\n4. Testando atualiza√ß√£o...')
      const { data: updatedInscricao, error: updateError } = await supabase
        .from('inscricoes_publicas')
        .update({ status: 'aprovada' })
        .eq('id', createdInscricao[0].id)
        .select()
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar:', updateError.message)
      } else {
        console.log('‚úÖ Inscri√ß√£o atualizada:', updatedInscricao[0].status)
      }
      
      // 5. Limpar inscri√ß√£o de teste
      console.log('\n5. Limpando inscri√ß√£o de teste...')
      const { error: deleteError } = await supabase
        .from('inscricoes_publicas')
        .delete()
        .eq('id', createdInscricao[0].id)
      
      if (deleteError) {
        console.error('‚ùå Erro ao deletar:', deleteError.message)
      } else {
        console.log('‚úÖ Inscri√ß√£o de teste removida')
      }
    }
    
    console.log('\nüéâ Verifica√ß√£o da estrutura conclu√≠da!')
    console.log('‚úÖ Tabela inscricoes_publicas est√° pronta para CRUD')
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message)
  }
}

checkInscricoesStructure()
