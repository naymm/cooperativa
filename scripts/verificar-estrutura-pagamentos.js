#!/usr/bin/env node

console.log('üîç VERIFICA√á√ÉO DA ESTRUTURA DA TABELA PAGAMENTOS');
console.log('');

console.log('üéØ OBJETIVO:');
console.log('Verificar se a tabela pagamentos tem a estrutura correta');
console.log('para suportar pagamentos de taxa de inscri√ß√£o.');
console.log('');

console.log('üìã CAMPOS NECESS√ÅRIOS:');
console.log('='.repeat(60));
console.log('1. id: UUID (PRIMARY KEY)');
console.log('2. cooperado_id: UUID (FOREIGN KEY)');
console.log('3. assinatura_plano_id: UUID (FOREIGN KEY, nullable)');
console.log('4. valor: DECIMAL/NUMERIC');
console.log('5. data_vencimento: DATE');
console.log('6. tipo: VARCHAR (para "taxa_inscricao")');
console.log('7. status: VARCHAR (para "pendente", "pago", etc.)');
console.log('8. metodo_pagamento: VARCHAR');
console.log('9. referencia: VARCHAR');
console.log('10. observacoes: JSONB');
console.log('11. data_pagamento: TIMESTAMP (nullable)');
console.log('12. created_at: TIMESTAMP');
console.log('13. updated_at: TIMESTAMP');
console.log('='.repeat(60));

console.log('');
console.log('üîß SQL PARA VERIFICAR ESTRUTURA:');
console.log('');

console.log(`
-- Verificar estrutura da tabela pagamentos
SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default,
    ordinal_position
FROM information_schema.columns 
WHERE table_name = 'pagamentos' 
AND table_schema = 'public'
ORDER BY ordinal_position;
`);

console.log('');
console.log('üîß SQL PARA VERIFICAR DADOS:');
console.log('');

console.log(`
-- Verificar registros existentes
SELECT 
    id,
    cooperado_id,
    assinatura_plano_id,
    valor,
    tipo,
    status,
    metodo_pagamento,
    referencia,
    data_vencimento,
    data_pagamento,
    created_at
FROM pagamentos 
ORDER BY created_at DESC
LIMIT 10;
`);

console.log('');
console.log('üîß SQL PARA VERIFICAR PAGAMENTOS DE TAXA:');
console.log('');

console.log(`
-- Verificar pagamentos de taxa de inscri√ß√£o
SELECT 
    p.id,
    p.cooperado_id,
    p.valor,
    p.tipo,
    p.status,
    p.data_vencimento,
    p.referencia,
    c.nome_completo,
    c.numero_associado
FROM pagamentos p
LEFT JOIN cooperados c ON p.cooperado_id = c.id
WHERE p.tipo = 'taxa_inscricao'
ORDER BY p.created_at DESC;
`);

console.log('');
console.log('üîß SQL PARA CRIAR TABELA (se n√£o existir):');
console.log('');

console.log(`
-- Criar tabela pagamentos se n√£o existir
CREATE TABLE IF NOT EXISTS pagamentos (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    cooperado_id UUID NOT NULL REFERENCES cooperados(id),
    assinatura_plano_id UUID REFERENCES assinatura_planos(id),
    valor DECIMAL(10,2) NOT NULL,
    data_vencimento DATE NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pendente',
    metodo_pagamento VARCHAR(50),
    referencia VARCHAR(100) UNIQUE,
    observacoes JSONB,
    data_pagamento TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar √≠ndices para melhor performance
CREATE INDEX IF NOT EXISTS idx_pagamentos_cooperado_id ON pagamentos(cooperado_id);
CREATE INDEX IF NOT EXISTS idx_pagamentos_tipo ON pagamentos(tipo);
CREATE INDEX IF NOT EXISTS idx_pagamentos_status ON pagamentos(status);
CREATE INDEX IF NOT EXISTS idx_pagamentos_vencimento ON pagamentos(data_vencimento);
`);

console.log('');
console.log('üîß SQL PARA ADICIONAR CAMPOS FALTANTES:');
console.log('');

console.log(`
-- Adicionar campos se n√£o existirem
ALTER TABLE pagamentos 
ADD COLUMN IF NOT EXISTS tipo VARCHAR(50);

ALTER TABLE pagamentos 
ADD COLUMN IF NOT EXISTS metodo_pagamento VARCHAR(50);

ALTER TABLE pagamentos 
ADD COLUMN IF NOT EXISTS referencia VARCHAR(100);

ALTER TABLE pagamentos 
ADD COLUMN IF NOT EXISTS observacoes JSONB;

ALTER TABLE pagamentos 
ADD COLUMN IF NOT EXISTS data_pagamento TIMESTAMP WITH TIME ZONE;

-- Adicionar constraint √∫nica para refer√™ncia
ALTER TABLE pagamentos 
ADD CONSTRAINT IF NOT EXISTS uk_pagamentos_referencia UNIQUE (referencia);
`);

console.log('');
console.log('üìã PASSO A PASSO PARA VERIFICA√á√ÉO:');
console.log('');

console.log('1Ô∏è‚É£ VERIFICAR ESTRUTURA:');
console.log('   - Execute o primeiro SQL no Supabase');
console.log('   - Verifique se todos os campos necess√°rios existem');
console.log('   - Confirme os tipos de dados');

console.log('');
console.log('2Ô∏è‚É£ VERIFICAR DADOS:');
console.log('   - Execute o segundo SQL no Supabase');
console.log('   - Verifique se h√° registros na tabela');
console.log('   - Confirme se os dados est√£o corretos');

console.log('');
console.log('3Ô∏è‚É£ VERIFICAR PAGAMENTOS DE TAXA:');
console.log('   - Execute o terceiro SQL no Supabase');
console.log('   - Verifique se h√° pagamentos de taxa de inscri√ß√£o');
console.log('   - Confirme se o tipo est√° correto');

console.log('');
console.log('4Ô∏è‚É£ CRIAR/ATUALIZAR TABELA (se necess√°rio):');
console.log('   - Execute o quarto SQL se a tabela n√£o existir');
console.log('   - Execute o quinto SQL para adicionar campos faltantes');
console.log('   - Verifique se n√£o h√° erros');

console.log('');
console.log('üîç PROBLEMAS COMUNS:');
console.log('');

console.log('‚ùå Tabela pagamentos n√£o existe:');
console.log('   - Execute o SQL de cria√ß√£o da tabela');
console.log('   - Verifique se a tabela foi criada');
console.log('   - Confirme se os √≠ndices foram criados');

console.log('');
console.log('‚ùå Campo tipo n√£o existe:');
console.log('   - Execute o SQL para adicionar o campo');
console.log('   - Verifique se o campo foi adicionado');
console.log('   - Confirme o tipo de dados');

console.log('');
console.log('‚ùå Campo cooperado_id n√£o existe:');
console.log('   - Verifique se a foreign key est√° correta');
console.log('   - Confirme se a tabela cooperados existe');
console.log('   - Verifique se o relacionamento est√° funcionando');

console.log('');
console.log('‚ùå Erro de constraint:');
console.log('   - Verifique se a refer√™ncia √© √∫nica');
console.log('   - Confirme se n√£o h√° duplicatas');
console.log('   - Verifique se o formato est√° correto');

console.log('');
console.log('üìä RESULTADO ESPERADO:');
console.log('');

console.log('‚úÖ ESTRUTURA CORRETA:');
console.log('   - Todos os campos necess√°rios existem');
console.log('   - Tipos de dados est√£o corretos');
console.log('   - √çndices foram criados');
console.log('   - Constraints est√£o funcionando');

console.log('');
console.log('‚úÖ DADOS CORRETOS:');
console.log('   - Pagamentos de taxa de inscri√ß√£o existem');
console.log('   - Tipo = "taxa_inscricao"');
console.log('   - Status = "pendente" para novos');
console.log('   - Refer√™ncia √∫nica para cada pagamento');

console.log('');
console.log('üéØ TESTE ESPEC√çFICO:');
console.log('');

console.log('1. Acesse o Supabase Dashboard');
console.log('2. V√° para SQL Editor');
console.log('3. Execute os SQLs de verifica√ß√£o');
console.log('4. Verifique se a estrutura est√° correta');
console.log('5. Execute os SQLs de cria√ß√£o se necess√°rio');
console.log('6. Teste a cria√ß√£o de um pagamento manual');

console.log('');
console.log('‚úÖ SISTEMA PRONTO PARA VERIFICA√á√ÉO!');
console.log('üöÄ Execute os SQLs no Supabase para verificar a estrutura');
